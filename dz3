import random
import timeit


# --- Insertion Sort ---
def insertion_sort(arr):
    for i in range(1, len(arr)):
        key = arr[i]
        j = i - 1

        while j >= 0 and arr[j] > key:
            arr[j + 1] = arr[j]
            j -= 1

        arr[j + 1] = key


# --- Merge Sort ---
def merge_sort(arr):
    if len(arr) <= 1:
        return arr

    mid = len(arr) // 2
    left = merge_sort(arr[:mid])
    right = merge_sort(arr[mid:])

    return merge(left, right)


def merge(left, right):
    result = []
    i = j = 0

    while i < len(left) and j < len(right):
        if left[i] < right[j]:
            result.append(left[i])
            i += 1
        else:
            result.append(right[j])
            j += 1

    result.extend(left[i:])
    result.extend(right[j:])
    return result


# --- Timsort (built-in) ---
def timsort(arr):
    return sorted(arr)


# --- Helper: run timeit ---
def measure_time(func, arr, number=3):
    return timeit.timeit(lambda: func(arr.copy()), number=number)


# --- Main comparison ---
def compare_algorithms():
    sizes = [100, 1000, 5000]
    algorithms = [
        ("Insertion Sort", insertion_sort),
        ("Merge Sort", lambda arr: merge_sort(arr)),
        ("Timsort (Python sorted)", timsort)
    ]

    for size in sizes:
        print(f"\n=== Масив розміру {size} ===")
        data = [random.randint(0, 10000) for _ in range(size)]

        for name, func in algorithms:
            try:
                exec_time = measure_time(func, data)
                print(f"{name:<25}: {exec_time:.5f} сек")
            except Exception as e:
                print(f"{name:<25}: Помилка: {e}")


if __name__ == "__main__":
    compare_algorithms()
